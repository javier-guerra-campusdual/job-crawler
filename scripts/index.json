{
    "rss_content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\"\n\txmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n\txmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n\txmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n\txmlns:atom=\"http://www.w3.org/2005/Atom\"\n\txmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n\txmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\"\n\t>\n\n<channel>\n\t<title>Pavel Terenin</title>\n\t<atom:link href=\"http://pavelterenin.com/feed/\" rel=\"self\" type=\"application/rss+xml\" />\n\t<link>http://pavelterenin.com</link>\n\t<description>Web Development</description>\n\t<lastBuildDate>Thu, 18 Apr 2024 00:44:17 +0000</lastBuildDate>\n\t<language>en-CA</language>\n\t<sy:updatePeriod>hourly</sy:updatePeriod>\n\t<sy:updateFrequency>1</sy:updateFrequency>\n\t<generator>https://wordpress.org/?v=4.7.29</generator>\n\n<image>\n\t<url>http://pavelterenin.com/wp-content/uploads/2016/12/cropped-icon-32x32.jpg</url>\n\t<title>Pavel Terenin</title>\n\t<link>http://pavelterenin.com</link>\n\t<width>32</width>\n\t<height>32</height>\n</image> \n\t<item>\n\t\t<title>React 19 Features and How It Affects Next.js</title>\n\t\t<link>http://pavelterenin.com/2024/04/18/react-19-features-and-how-it-affects-next-js/</link>\n\t\t<comments>http://pavelterenin.com/2024/04/18/react-19-features-and-how-it-affects-next-js/#respond</comments>\n\t\t<pubDate>Thu, 18 Apr 2024 00:44:17 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[NEXT.js]]></category>\n\t\t<category><![CDATA[React]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=369</guid>\n\t\t<description><![CDATA[React 19 Update: Transforming UI Development As we step into 2024, the development community is abuzz with anticipation for the major update to React, the renowned JavaScript library for building ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter size-full wp-image-370\" src=\"http://pavelterenin.com/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-5.22.55-PM.png\" alt=\"\" width=\"1994\" height=\"820\" srcset=\"http://pavelterenin.com/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-5.22.55-PM.png 1994w, http://pavelterenin.com/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-5.22.55-PM-300x123.png 300w, http://pavelterenin.com/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-5.22.55-PM-768x316.png 768w, http://pavelterenin.com/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-5.22.55-PM-700x288.png 700w\" sizes=\"(max-width: 1994px) 100vw, 1994px\" /></p>\n<div class=\"relative flex w-full flex-col agent-turn\">\n<div class=\"font-semibold select-none\"></div>\n<div class=\"flex-col gap-1 md:gap-3\">\n<div class=\"flex flex-grow flex-col max-w-full\">\n<div class=\"min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto\" dir=\"auto\" data-message-author-role=\"assistant\" data-message-id=\"5bdc746d-ec01-4a5a-b88b-c7ab28079ed1\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<h1>React 19 Update: Transforming UI Development</h1>\n<p>As we step into 2024, the development community is abuzz with anticipation for the major update to React, the renowned JavaScript library for building user interfaces—React 19. Scheduled for release around June or July 2024, this update is poised to introduce a plethora of features that could redefine development strategies, particularly affecting how frameworks like Next.js are perceived and utilized.</p>\n<h3>Unpacking the Innovations of React 19</h3>\n<p><strong>Introduction of the React Compiler</strong></p>\n<p>The React Compiler marks a significant evolution from traditional performance optimization practices like<em><strong> useMemo()</strong></em> or <em><strong>useCallback()</strong></em>. By analyzing both JavaScript and the internal mechanisms of React itself, this compiler automates the optimization process, ensuring that UI updates are restricted to genuinely necessary instances, thereby enhancing performance. So basically it makes <em><strong>useMemo()</strong></em> and <em><strong>useCallback()</strong></em><strong> </strong>redundant. React 19 is backward compatible, so the code that implemented those hooks will continue working as expected. There will no need for urgent refactoring.</p>\n<p>The magic of the React Compiler lies in its ability to implement performance optimizations. This includes optimizing the rendering process by minimizing unnecessary re-renders, which can significantly boost the efficiency of React applications. The compiler does this by intelligently determining what needs to be updated in the DOM, thus reducing the overhead associated with component re-rendering.</p>\n<p>For developers, this means less time spent on manually tuning performance and more focus on building great features. The React Compiler automates what was once a meticulous and error-prone part of React development, offering a more streamlined, error-resistant way to ensure applications run smoothly and responsively. As we integrate the React Compiler into our projects, I anticipate seeing a noticeable improvement in performance, particularly in large-scale applications where even minor inefficiencies can accumulate to affect overall user experience.</p>\n<p><strong>Server Components</strong></p>\n<p>In the upcoming release of React 19, one of the most exciting additions is the concept of Server Components. As a software engineer who has worked extensively with web technologies, I see this feature as a game-changer for developing more efficient and dynamic web applications. Server Components allow React developers to render components directly on the server, which can drastically reduce the amount of code sent to the client. This approach not only speeds up the loading times but also optimizes resource usage by offloading processing tasks to the server.</p>\n<p>What sets Server Components apart is their ability to seamlessly integrate with client-side components, allowing developers to blend server-side and client-side rendering according to the application&#8217;s needs. This flexibility can lead to significantly improved user experiences, especially in data-heavy applications where you can pre-fill forms or dynamically generate content server-side before sending it to the client.</p>\n<p>Additionally, Server Components are designed to work without shipping JavaScript code for the components that are rendered server-side, reducing the initial load time and improving the overall performance of the application. This is particularly beneficial for complex applications and those with stringent performance requirements. The introduction of Server Components in React 19 represents a significant step forward in building interactive, highly performant web applications that are both scalable and maintainable.</p>\n<p><strong>The Debut of Actions</strong></p>\n<div class=\"relative flex w-full flex-col agent-turn\">\n<div class=\"flex-col gap-1 md:gap-3\">\n<div class=\"flex flex-grow flex-col max-w-full\">\n<div class=\"min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto\" dir=\"auto\" data-message-author-role=\"assistant\" data-message-id=\"543dea40-130a-41fa-a383-033da28e1b14\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p>In the latest React 19 update, one of the standout features that has caught my attention as a software engineer is the introduction of &#8220;Actions.&#8221; This new functionality significantly enhances the way we handle imperative logic within our React applications, particularly in scenarios involving direct DOM interactions. Actions are designed to offer a more structured approach to manage side effects and DOM manipulations, which are often necessary when integrating with third-party libraries or executing complex UI updates.</p>\n<p>What makes Actions particularly appealing is their potential to simplify and organize code that previously relied on less straightforward methods such as using <code>useEffect</code> or direct DOM manipulation scripts. This addition promises to reduce boilerplate and increase the maintainability of applications by providing a more declarative interface for performing imperative tasks. As someone who often grapples with the intricacies of marrying React&#8217;s declarative nature with the imperative needs of modern web applications, I am eager to explore how Actions can streamline these processes, leading to cleaner and more efficient code.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p><strong>Fresh Hooks and More<br />\n</strong></p>\n<p>With the rollout of React 19, the introduction of new hooks is a noteworthy development that is creating a buzz among developers, including myself. As a software engineer, I appreciate how hooks have revolutionized the way we write React components by providing more reusable and concise ways to manage state and side effects. The new hooks in React 19 continue this trend, enhancing the developer experience and broadening the capabilities of functional components.</p>\n<p>One of the standout new hooks in this update is the <em><strong><code>use()</code></strong></em> hook. This hook simplifies the process of defining custom hooks, allowing developers to create them without the need for separate function declarations. This leads to cleaner code and can help in reducing boilerplate, making custom hooks easier to write and maintain.</p>\n<p>Another intriguing addition is the <em><strong><code>useFormStatus()</code></strong></em> hook, currently labeled as experimental. This hook is designed to make form handling a breeze by providing developers with direct access to the submission status of forms. It helps in tracking whether a form is pending, has been successfully submitted, or failed, directly within the component logic. This can be incredibly valuable in creating user interfaces that need to provide immediate feedback to users based on their interactions with forms.</p>\n<p>These new hooks are just a part of the broader set of enhancements in React 19 that aim to improve both the performance and the developer experience. As we begin to incorporate these hooks into our projects, I anticipate they will bring more robustness and clarity to our components, fostering more dynamic and responsive applications.</p>\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p><img class=\"aligncenter size-full wp-image-372\" src=\"http://pavelterenin.com/wp-content/uploads/2024/04/0_Y45wCzaydkTBh9Ij.png\" alt=\"\" width=\"1400\" height=\"583\" srcset=\"http://pavelterenin.com/wp-content/uploads/2024/04/0_Y45wCzaydkTBh9Ij.png 1400w, http://pavelterenin.com/wp-content/uploads/2024/04/0_Y45wCzaydkTBh9Ij-300x125.png 300w, http://pavelterenin.com/wp-content/uploads/2024/04/0_Y45wCzaydkTBh9Ij-768x320.png 768w, http://pavelterenin.com/wp-content/uploads/2024/04/0_Y45wCzaydkTBh9Ij-700x292.png 700w\" sizes=\"(max-width: 1400px) 100vw, 1400px\" /></p>\n<h3>React 19 and Next.js: Evolution or Revolution?</h3>\n<p>As a software engineer immersed in the world of modern web development, the upcoming release of React 19 has sparked a great deal of interest, especially regarding its implications for frameworks built atop React, such as Next.js. React 19 introduces several groundbreaking features that promise to enhance both performance and developer experience. This has led to a burning question in the developer community: How will React 19 affect Next.js?</p>\n<p><strong>Server-Side Rendering (SSR) and Server Components<br />\n</strong>Next.js has long excelled in SSR, providing a robust framework for rendering React components on the server. The introduction of Server Components in React 19 could be seen as stepping into territory that Next.js has pioneered. However, rather than viewing this as a competitive overlap, it&#8217;s more accurate to see it as an enhancement that Next.js can leverage. The ability to use React 19’s Server Components could make Next.js even more powerful, combining its structured framework with React’s optimized server rendering capabilities.</p>\n<p><strong>Performance Optimizations<br />\n</strong>The React Compiler is a significant advancement in React 19, designed to optimize the performance of React applications automatically. Next.js already implements several optimization techniques, such as code splitting and automatic static optimization. The React Compiler could further enhance Next.js applications by reducing the runtime cost associated with React components. This symbiosis could lead to even faster and more efficient Next.js applications.</p>\n<p><strong>Developer Experience<br />\n</strong>Both React 19 and Next.js are focused on improving the developer experience—React 19 through its new features and optimizations, and Next.js with its comprehensive framework that includes routing, data fetching, and more. The enhancements in React 19 could make Next.js even more appealing by simplifying the development process and reducing the learning curve for new developers.</p>\n<h4>Will React 19 Replace Next.js?</h4>\n<p><strong>Complementary Rather Than Competitive<br />\n</strong>While React 19&#8217;s features are impressive, they are likely to complement Next.js rather than replace it. Next.js is built on top of React, meaning it inherently benefits from improvements within React itself. For instance, React 19’s Server Components could enhance Next.js&#8217;s existing capabilities in server-side rendering, allowing Next.js developers to build even more efficient applications.</p>\n<p><strong>Focused Framework vs. Library<br />\n</strong>Next.js is a framework that provides a structured environment for building applications with React. It offers out-of-the-box features such as file-based routing, pre-rendering, and optimized image handling, which are not directly provided by React alone. React 19 enhances the library&#8217;s core capabilities, but it doesn&#8217;t offer the comprehensive framework solutions that Next.js does.</p>\n<p><strong>Optimization and Performance<br />\n</strong>The React Compiler’s automatic optimization could theoretically reduce some of the performance advantages that Next.js offers through its built-in optimizations. However, this scenario is more likely to improve Next.js applications further, as they can utilize both the intrinsic optimizations from React 19 and the additional enhancements provided by the Next.js framework.</p>\n<h4>The Future Relationship Between React 19 and Next.js</h4>\n<p>The introduction of React 19 is unlikely to replace Next.js. Instead, it should be seen as a powerful update that will provide Next.js with even more tools to enhance its already robust capabilities. The seamless integration between React and Next.js means that improvements in React directly benefit Next.js, making the framework more powerful and easier to use.</p>\n<p>Next.js continues to offer a rich set of features that cater to a wide range of web development needs, from static site generation to server-side rendering. These features, combined with the enhancements from React 19, will likely solidify Next.js&#8217;s position as a leading choice for developers seeking to build high-performance, scalable web applications.</p>\n<p>In conclusion, React 19 will not replace Next.js but will instead bolster its position in the development community by enhancing its functionality and performance. For developers committed to building top-tier web applications, the combination of React 19 and Next.js represents a compelling toolkit, equipped to tackle the challenges of modern web development.</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2024/04/18/react-19-features-and-how-it-affects-next-js/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>System Reliability</title>\n\t\t<link>http://pavelterenin.com/2024/04/16/system-reliability/</link>\n\t\t<comments>http://pavelterenin.com/2024/04/16/system-reliability/#respond</comments>\n\t\t<pubDate>Tue, 16 Apr 2024 23:53:10 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[System Design]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=361</guid>\n\t\t<description><![CDATA[System Reliability In this post, we&#8217;re focusing on strategies to enhance reliability in system design. A reliable system performs its functions consistently, tolerates errors effectively, and prevents unauthorized access or ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter size-full wp-image-362\" src=\"http://pavelterenin.com/wp-content/uploads/2024/04/1673306043978.jpeg\" alt=\"\" width=\"1280\" height=\"720\" srcset=\"http://pavelterenin.com/wp-content/uploads/2024/04/1673306043978.jpeg 1280w, http://pavelterenin.com/wp-content/uploads/2024/04/1673306043978-300x169.jpeg 300w, http://pavelterenin.com/wp-content/uploads/2024/04/1673306043978-768x432.jpeg 768w, http://pavelterenin.com/wp-content/uploads/2024/04/1673306043978-700x394.jpeg 700w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></p>\n<h1>System Reliability</h1>\n<p>In this post, we&#8217;re focusing on strategies to enhance reliability in system design. A reliable system performs its functions consistently, tolerates errors effectively, and prevents unauthorized access or misuse. Reliability encompasses availability and much more, such as added security, error handling, disaster recovery, and various other contingencies.</p>\n<p>Why is this important? Because things will inevitably fail. This could be due to network outages, hardware failures, flawed rollouts, or even malicious attacks. Any system with dependencies must include logic to address these failures. Most failures in distributed systems arise from two types:</p>\n<ol>\n<li><strong>Hardware errors</strong>: These include issues like network outages or server failures, which are often non-transient and not quickly resolved.</li>\n<li><strong>Application errors</strong>: These are bugs or failures due to unexpected traffic spikes. They&#8217;re usually transient and resolve more swiftly.</li>\n</ol>\n<p>It&#8217;s clear that enhancing system reliability affects performance and costs due to increased complexity, engineering time, and financial investment. When discussing reliability, it&#8217;s beneficial to:</p>\n<ul>\n<li>Refer back to the initially defined requirements, helping focus on mitigating the most critical or likely risks.</li>\n<li>Assume failures will occur and design systems that can gracefully recover right from the start.</li>\n<li>Incorporate testing strategies and monitoring techniques to assess system requirements, track system health, and implement necessary adjustments. We&#8217;ll explore common strategies in a later lesson.</li>\n</ul>\n<p>Now, let’s delve into some effective reliability strategies:</p>\n<p><strong>Retries</strong>: A simple retry strategy involves an application attempting the same operation immediately after a failure. This is fine if the failure is unusual and unlikely to recur, but for common transient issues like network failures, repeated retries might overwhelm the system once the issue is resolved. A more refined approach is the delayed retry, which includes an exponential backoff strategy. This systematically decreases the retry frequency to find an acceptable rate.</p>\n<p><strong>Use Cases</strong>:</p>\n<ul>\n<li>Simple retries are best for unusual and transient errors. It&#8217;s wise to implement a request limit to avoid system overload.</li>\n<li>Delayed retries with exponential backoff are suited for more common transient errors.</li>\n</ul>\n<p><strong>Techniques &amp; Considerations</strong>:</p>\n<ul>\n<li>High retry rates can cause the &#8220;thundering herd problem&#8221;, where systems get overloaded quickly once the error resolves. Introducing jitter, or randomness, in delay intervals can prevent synchronized client requests.</li>\n</ul>\n<p>From a UX perspective, sometimes it&#8217;s better to fail fast and inform users to try again later. Implement a low retry limit and promptly alert users in such scenarios.</p>\n<p><strong>Circuit Breakers</strong>: A robust retry strategy is useful for short-lived transient errors, but what about non-transient errors, or transient errors with uncertain recovery times?</p>\n<p>Unlike retry patterns that assume eventual success, a circuit breaker strategy accepts failure, stopping repeated attempts and conserving resources. This strategy includes a mechanism to test if a service has been restored and to unblock traffic accordingly.</p>\n<p>Imagine a circuit breaker as a physical device that cuts power to prevent damage, then resets once the issue is fixed. Similarly, in our application, if a request fails too often, the circuit breaker opens, stopping all requests. After a set time, it partially reopens to test the system with a few requests. If these succeed, it fully reopens; if not, it remains open until the next test.</p>\n<p><strong>Use Cases</strong>:</p>\n<ul>\n<li>Prevents cascading failures when a resource fails.</li>\n<li>Enables quick responses where performance is critical by rejecting likely-to-fail operations.</li>\n</ul>\n<p><strong>Techniques &amp; Considerations</strong>:</p>\n<ul>\n<li>Handling exceptions when a resource is down is crucial. Possible responses include switching to basic functionality, trying alternative data sources, or notifying the user.</li>\n<li>Configuring the circuit breaker requires careful consideration of anticipated recovery patterns and performance requirements.</li>\n</ul>\n<p><strong>Saga</strong>: The saga strategy is commonly used in microservice architectures to maintain data consistency across multiple services. Imagine an e-commerce site where multiple transactions (like updating carts, charging payments, managing inventory) are interdependent. If one transaction fails, a saga helps reverse all preceding transactions to maintain system integrity.</p>\n<p>You can coordinate sagas through choreography—a decentralized approach where each transaction triggers the next—or orchestration, where a central controller manages the process.</p>\n<p><strong>Use Cases</strong>:</p>\n<ul>\n<li>Maintains consistency across services, ideal for systems where the same operation might be attempted multiple times, such as credit card charges.</li>\n<li>For simpler systems, choreographed sagas reduce the risk of a single point of failure. For more complex setups, orchestrated sagas are preferable.</li>\n</ul>\n<p><strong>Techniques &amp; Considerations</strong>:</p>\n<ul>\n<li>Implementing sagas introduces complexity, as you need to define compensating transactions for different failure scenarios. This might require significant upfront work to understand user behavior and potential failure modes.</li>\n</ul>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2024/04/16/system-reliability/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>Top 9 Architectural Patterns for Data and Communication Flow</title>\n\t\t<link>http://pavelterenin.com/2024/04/10/top-9-architectural-patterns-for-data-and-communication-flow/</link>\n\t\t<comments>http://pavelterenin.com/2024/04/10/top-9-architectural-patterns-for-data-and-communication-flow/#respond</comments>\n\t\t<pubDate>Wed, 10 Apr 2024 20:13:24 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[System Design]]></category>\n\t\t<category><![CDATA[Uncategorized]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=358</guid>\n\t\t<description><![CDATA[&#160; Top 9 Architectural Patterns for Data and Communication Flow Peer-to-Peer This architecture facilitates direct interaction between parties or components, bypassing the need for a centralized server. Each node in ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter size-full wp-image-359\" src=\"http://pavelterenin.com/wp-content/uploads/2024/04/unnamed.jpg\" alt=\"\" width=\"1284\" height=\"1464\" srcset=\"http://pavelterenin.com/wp-content/uploads/2024/04/unnamed.jpg 1284w, http://pavelterenin.com/wp-content/uploads/2024/04/unnamed-263x300.jpg 263w, http://pavelterenin.com/wp-content/uploads/2024/04/unnamed-768x876.jpg 768w, http://pavelterenin.com/wp-content/uploads/2024/04/unnamed-700x798.jpg 700w\" sizes=\"(max-width: 1284px) 100vw, 1284px\" /></p>\n<p>&nbsp;</p>\n<h1><span style=\"font-weight: 400;\">Top 9 Architectural Patterns for Data and Communication Flow<br />\n</span></h1>\n<p><strong>Peer-to-Peer</strong><br />\nThis architecture facilitates direct interaction between parties or components, bypassing the need for a centralized server. Each node in a P2P network acts as both a client and a server, enabling decentralized data sharing and communication. This model is particularly effective in scenarios where scalability, resilience to failure, and decentralization are crucial, such as in file-sharing networks or blockchain technologies. The absence of a central point of control helps in avoiding bottlenecks and single points of failure.</p>\n<p><strong>API Gateway</strong><br />\nAn API Gateway stands at the front of an application&#8217;s backend services, acting as a reverse proxy to route client requests to the appropriate backend service based on the request path, method, and other attributes. It can also aggregate results from multiple services, translate between web protocols and web-unfriendly protocols, and implement security policies like OAuth. This pattern simplifies the client-side code and provides a central point for cross-cutting concerns like monitoring, logging, and security.</p>\n<p><strong>Pub-Sub</strong><br />\nIn the Publish-Subscribe model, publishers post messages without knowledge of the subscribers, if any, and subscribers listen for messages of interest without knowledge of the publishers. A message broker intermediates the communication, enhancing system scalability and decoupling by dynamically routing messages from publishers to subscribers. This pattern is widely used in designing distributed systems and event-driven architectures, allowing for high levels of scalability and dynamic network topologies.</p>\n<p><strong>Request-Response</strong><br />\nThis synchronous communication pattern is foundational in client-server interactions. A client sends a request to the server, which processes the request and returns a response. This pattern is the basis of many web applications and services, where HTTP is commonly used as the underlying protocol. The simplicity of this pattern makes it suitable for many scenarios, but it can introduce latency as the client waits for the server&#8217;s response.</p>\n<p><strong>Event Sourcing<br />\n</strong>Event Sourcing captures changes to an application state as a sequence of events. This allows for an accurate audit trail and the ability to replay events to restore the state of an entity at any point in time. It is particularly useful in complex systems for debugging, auditing, and the system&#8217;s evolution, allowing for temporal queries and state reconstruction. This pattern often goes hand in hand with CQRS (Command Query Responsibility Segregation) to separate read and write operations for further scalability and maintainability.</p>\n<p><strong>ETL (Extract, Transform, Load)<br />\n</strong>ETL processes extract data from various sources, transform the data into a consistent format, and load it into a destination storage system, typically a data warehouse. This pattern is crucial in data warehousing, enabling businesses to aggregate and harmonize data from disparate sources for reporting, analytics, and business intelligence. The transformation stage often involves cleaning, enriching, and restructuring data to support decision-making processes.</p>\n<p><strong>Batching<br />\n</strong>Batch processing accumulates data over time or until a certain threshold is reached, then processes that data in a single, large group. This approach can improve efficiency and performance for tasks that don&#8217;t require immediate processing or when dealing with systems that have limited resources. It is especially relevant in scenarios like end-of-day transaction processing, data import/export tasks, or when interfacing with legacy systems that are not designed for real-time processing.</p>\n<p><strong>Streaming Processing</strong><br />\nStreaming processing continuously ingests, processes, and analyzes data in real-time as it flows from source to destination. Unlike batch processing, which handles data in chunks, streaming processing deals with data individually or in small batches, enabling immediate insights and actions. This is crucial in use cases like real-time analytics, monitoring, and event detection, where the value of the data diminishes rapidly over time.</p>\n<p><strong>Orchestration</strong><br />\nOrchestration involves managing complex interactions and dependencies between distributed components or services to fulfill a business process or workflow. An orchestrator, typically a dedicated service or component, directs each step of the process, ensuring tasks are executed in the correct order, managing retries and error handling, and maintaining the state of the workflow. This pattern is essential in microservices architectures, where it helps to coordinate processes that span multiple services, and in cloud computing, to manage the lifecycle of dynamic resources.</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2024/04/10/top-9-architectural-patterns-for-data-and-communication-flow/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>Micro Frontends</title>\n\t\t<link>http://pavelterenin.com/2023/01/20/micro-frontends/</link>\n\t\t<comments>http://pavelterenin.com/2023/01/20/micro-frontends/#respond</comments>\n\t\t<pubDate>Fri, 20 Jan 2023 00:24:36 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[Micro Frontends]]></category>\n\t\t<category><![CDATA[System Design]]></category>\n\t\t<category><![CDATA[frontend]]></category>\n\t\t<category><![CDATA[micro frontends]]></category>\n\t\t<category><![CDATA[system compsition]]></category>\n\t\t<category><![CDATA[system design]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=342</guid>\n\t\t<description><![CDATA[Micro Frontends Are you looking for ways to improve the frontend of your web-based app? If so, then micro frontends might be the answer. Micro frontends is an architectural approach ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<h1><img class=\"wp-image-346 aligncenter\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/Micro-Frontend—Why-and-How-300x168.png\" alt=\"\" width=\"802\" height=\"449\" srcset=\"http://pavelterenin.com/wp-content/uploads/2023/01/Micro-Frontend—Why-and-How-300x168.png 300w, http://pavelterenin.com/wp-content/uploads/2023/01/Micro-Frontend—Why-and-How-768x430.png 768w, http://pavelterenin.com/wp-content/uploads/2023/01/Micro-Frontend—Why-and-How-700x392.png 700w, http://pavelterenin.com/wp-content/uploads/2023/01/Micro-Frontend—Why-and-How.png 1193w\" sizes=\"(max-width: 802px) 100vw, 802px\" /></h1>\n<h1><b>Micro Frontends</b></h1>\n<p><span style=\"font-weight: 400;\">Are you looking for ways to improve the frontend of your web-based app? If so, then micro frontends might be the answer.</span></p>\n<p><span style=\"font-weight: 400;\">Micro frontends is an architectural approach that focuses on designing the client-side layer of websites and web apps. By breaking down monolithic applications into smaller, more manageable components, this approach allows for better integration of new features and technologies as well as improved scalability.</span></p>\n<p><span style=\"font-weight: 400;\">In this blog post, we will explore what micro frontends are, why they are beneficial, how to implement them in your project, and potential uses for this approach. </span></p>\n<h2><b>What is micro frontends</b></h2>\n<p><span style=\"font-weight: 400;\">Micro frontend architecture is based on the idea of breaking down a single page application (SPA) into smaller components. Each component, or micro frontend, has its own codebase and can be developed independently from other parts of the SPA. By using this approach, it becomes easier to integrate new features, technologies and tools without affecting the rest of the application. This is especially useful when introducing more complex technologies like AI, machine learning and natural language processing as each component can be independently tested and deployed.</span></p>\n<p><span style=\"font-weight: 400;\">With micro frontend architecture, individual components can be scaled up or down depending on the load they are experiencing. This means that if certain components of the application become more popular than others they can be scaled up while those that are less popular can be scaled down, resulting in a better resource utilization overall.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Finally, micro frontend architecture makes it easier to maintain the codebase as each component has its own version control system and developers don’t need to worry about breaking other components when making changes. This approach helps to ensure that all components are up-to-date and working as expected.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Let&#8217;s take a closer look at how micro frontends work by looking at the example of an Instagram page with AI-generated images:</span><br />\n<img class=\"wp-image-343 aligncenter\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-2.56.23-PM-300x223.png\" alt=\"\" width=\"673\" height=\"500\" srcset=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-2.56.23-PM-300x223.png 300w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-2.56.23-PM-768x570.png 768w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-2.56.23-PM-700x520.png 700w\" sizes=\"(max-width: 673px) 100vw, 673px\" /></p>\n<p><span style=\"font-weight: 400;\">With micro frontends, this single web page can be broken down into multiple sections, each with its own dedicated team. For instance, the profile page will consist of sections such as a Profile Info section, Photos and Videos section, Friends and Followers section, and so on. Each team is responsible for developing and maintaining their respective sections independently, while still adhering to overall design guidelines set by the product team.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">As a result, developers can make changes to their sections independently and quickly deploy them, without waiting for the entire page to be re-built. This is helpful in cases where only certain parts of the web page need changing, such as fixing bugs or adding new features. It also helps to keep the code more organized and manageable, as each team is responsible for their own section.</span></p>\n<p>&nbsp;</p>\n<p><b>Monolithic architecture vs microservices and micro frontends</b></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">When it comes to building a web application, the two major approaches &#8211; monolithic architecture and microservices and micro frontends &#8211; can be compared to the task of moving from one place to another. Packing all your stuff in a single large box will make the process much simpler and faster, but unpacking it at the destination might become quite a challenge. On the other hand, sorting your items into multiple smaller boxes with labels is more time-consuming, but it will make unpacking a lot easier.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">The same logic applies to web development, in which monolithic architecture is all about having everything bundled together, while microservices and micro frontends divide the codebase into distinct units, where each component can be built, deployed, and managed independently.</span><br />\n<img class=\"wp-image-344 aligncenter\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.43-PM-300x136.png\" alt=\"\" width=\"726\" height=\"329\" srcset=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.43-PM-300x136.png 300w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.43-PM-768x348.png 768w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.43-PM-700x317.png 700w\" sizes=\"(max-width: 726px) 100vw, 726px\" /><img class=\"wp-image-345 aligncenter\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.52-PM-300x152.png\" alt=\"\" width=\"705\" height=\"357\" srcset=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.52-PM-300x152.png 300w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.52-PM-768x389.png 768w, http://pavelterenin.com/wp-content/uploads/2023/01/Screen-Shot-2023-01-12-at-3.26.52-PM-700x355.png 700w\" sizes=\"(max-width: 705px) 100vw, 705px\" /></p>\n<h2><b>Monolithic architecture</b></h2>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Monolithic architecture is an approach to software development in which all components of an application are built and deployed as a single unit. This type of architecture has been around for years and is still popular today, due to its simplicity and stability. It provides developers with a cost-effective way to develop large-scale applications quickly without having to build complex infrastructures.</span></p>\n<p>&nbsp;</p>\n<h3><b>Advantages of Monolithic architecture</b></h3>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">There are many advantages to using Monolithic architecture in software development, as it can help reduce costs and time spent developing applications. Here are some of the top benefits:</span></p>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Simpler to Develop: By having all components of an application built and deployed together, developers can focus on building features quickly without having to worry about integrating multiple different components. It also makes it easier for teams of developers to collaborate, as all the code is in one place.</span></li>\n</ul>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Easy Maintenance: Because all components of the application are in one place, it makes it easier for developers to maintain and update existing applications. It also helps keep costs down by reducing the need for additional infrastructure.</span></li>\n</ul>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Secure: When all components built and deployed together, there are fewer points of failure. Hence, the app’s security improves,as any vulnerabilities in the application can be more easily identified and fixed.</span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Monolithic architecture offers many advantages to developers when it comes to building large-scale applications quickly and cost-effectively. With its simplicity and scalability, it is a great choice for many companies looking to develop applications efficiently and securely.</span></p>\n<p>&nbsp;</p>\n<h3><b>Disadvantages of monolithic architecture:</b></h3>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Difficult to Scale: One of the main issues with monolithic architectures is that they can be difficult to scale. If an application needs more resources, it must be completely rewritten and redeployed in order to accommodate them. This makes it difficult for developers to respond quickly to changing demands.</span></li>\n</ul>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Troubleshooting and Debugging: Since all components of a monolithic application are combined into one large package, it can be difficult for developers to pinpoint the source of any bugs or issues.Debugging and troubleshooting will be much more time-consuming and complex than with microservice architectures.</span></li>\n</ul>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Fragile Deployment: Monolithic architectures are typically more fragile and prone to breaking than microservices. If any of the components in the monolithic application fail, then the entire application can be affected. This makes it difficult to deploy and maintain applications with a high degree of reliability.</span></li>\n</ul>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Lack of Flexibility: Monolithic applications are typically less flexible than microservice architectures since they are more limited in terms of the functionality they can provide. It’s difficult to add new features or services without having to make radical changes to the application’s codebase.</span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Monolithic architectures have long been a source of challenges for software developers, as the rigid structure and codebase have made it difficult to create dynamic and responsive applications. Such architectures often require extensive reworking when trying to incorporate new features or accommodate changes in user needs. Microservices and micro frontends were developed as solutions to these issues, allowing developers to build more agile and efficient applications.</span></p>\n<p>&nbsp;</p>\n<h3><b>Microservice architecture</b></h3>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">In microservice architecture, an application is broken down into multiple smaller components that are loosely coupled and independently deployable, each running in their own process. Communication between these components is handled through API calls, usually via a simple REST protocol or an asynchronous messaging system like Kafka that supports events and publish/subscribe communication models. The frontend then interacts with the backend services through an API gateway or a “backend for frontend” (BFF) service.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">The advantages of microservices can be seen in the way teams work and how they manage their codebases, CI/CD pipelines, and DevOps practices. By splitting a monolithic backend team into multiple smaller teams where each focuses on one specific feature or aspect of the application (e.g., product service, search service, payment service), developers are able to achieve better security, scalability, and flexibility.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Microservices are an excellent choice for building application backends, offering greater flexibility and independence than traditional monolithic architectures. However, when implementing a microservice architecture, it is important to remember that the frontend will still likely be implemented as a single monolith.</span></p>\n<h3><b>Micro frontends architecture</b></h3>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Micro frontends represent an evolution in web application architecture, providing an intuitive way to divide up tasks among teams and allowing them to develop their projects independently. This type of architecture is based on the same principles as microservices, focusing on loosely coupled components that are taken care of by different teams.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">The main difference between microservices and micro frontends is that teams are grouped around a customer need or use case and have their own, clearly defined mission. In addition, teams are vertically sliced, meaning they develop their features from the user interface to the databases, and cross-functional as members are expected to share knowledge with the rest of the team.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Finally, each team can choose the technology stack that fits best for their part of the work, allowing for diverse and more efficient development. With the growing popularity of micro frontends, developers are able to create high-quality applications quickly and efficiently.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Thus, micro frontends provide an excellent way to split up the development process into smaller tasks and achieve greater results in a shorter time frame. It is quickly becoming the preferred option for web application developers who want to create powerful applications with optimal efficiency.</span></p>\n<p>&nbsp;</p>\n<h3><b>Advantages of Micro Frontends Architecture:</b></h3>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Improved scalability: By breaking down applications into independent services, microservices architecture enables developers to quickly scale and update parts of an application without having to modify the entire system.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Increased productivity: Microservices allow for faster development as teams can easily develop and deploy individual components independently, which leads to improved collaboration between team members.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Faster deployment: By being able to deploy microservices independently, development teams can quickly move applications from development to production in a fraction of the time it would take when using a monolithic architecture.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Improved availability: If a particular service fails, other services remain unaffected and can continue to operate. Increased resilience makes the system more reliable and better able to handle unexpected events.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Improved fault isolation: Due to their modular nature, microservices are easier to diagnose and fix in case of errors or failures. Developers can quickly identify which service is causing an issue and resolve it without having to debug the entire application.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Easier maintenance: Microservices can be updated, maintained and replaced independently of other services. This makes It’s easier to continuously improve applications over time without impacting existing features.</span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Overall, micro frontends architecture has many advantages that make it a great choice for developing complex applications. </span></p>\n<p>&nbsp;</p>\n<h3><b>How to implement micro frontends architecture in your project</b></h3>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">To implement micro front-end architecture, developers should start by breaking down the user interface into smaller, independent components. Each component should have a single responsibility that can be developed and maintained independently from other components. For example, instead of having one large page with multiple features, it might be split up into separate components for a header, footer, navigation menu and content area. The components should be built using the same technology stack in order for them to work together seamlessly.</span></p>\n<p><span style=\"font-weight: 400;\">Next, developers need to decide how the components will communicate with each other. This can be done using an event-driven architecture, where each component publishes and subscribes to events that communicate state changes. Alternatively, an API-based approach can be used in which components call APIs to fetch the information they need from other components.</span></p>\n<p>Once the architecture is designed, developers should build a framework that will handle loading and rendering the components on the page. This could involve using a library like React or Angular, or creating a custom solution that works with the existing technology stack. The framework should also be responsible for routing and managing the state of the application.</p>\n<p>Finally, developers need to consider how to deploy the components so that they can be tested and released independently from one another. This could involve using a tool such as Kubernetes, which allows teams to create isolated environments for each component. Alternatively, a microservices architecture could be used in which each component is deployed as an individual service.</p>\n<p>&nbsp;</p>\n<p><b>When it’s a good idea to use Micro frontends</b><b><br />\n</b><b><br />\n</b><span style=\"font-weight: 400;\">Micro frontends are a great solution for large, complex web applications. When a website or application has a lot of features and functionality, it can become difficult to manage if all the code is kept in one place. By splitting up the code into smaller chunks, each feature or page can be managed independently by different teams. This makes it much easier to scale and develop each feature, as well as create a better user experience overall. Micro frontends also allow for more efficient debugging, testing, and deployment of code, which can help reduce the risk of errors or bugs. Ultimately, micro frontends are a great way to manage complex web applications and keep them performing optimally. </span></p>\n<p>&nbsp;</p>\n<h2><b>When it’s not that good idea to use Micro Frontends</b></h2>\n<p>&nbsp;</p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">When you are looking for a quick solution without investing too much time and effort, micro frontends may not be the right choice. </span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">If your team lacks the necessary experience in designing and developing micro frontends, it is best to not take this route. </span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Additionally, if you are looking for a unified user interface with consistent design elements across different parts of your app, micro frontends may not be the best fit as they typically involve a lot of customization. </span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">It is also important to consider whether you have the resources to maintain multiple frontend systems. </span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Finally, if your application requires real-time data updates across different parts of your system, micro frontends may not be the best way to go due to the complexity around synchronization. </span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-weight: 400;\">Taking all of these factors into account can help you make an informed decision about whether micro frontends are a good idea for your project. </span></p>\n<p>&nbsp;</p>\n<h2><b>Conclusion</b></h2>\n<p><span style=\"font-weight: 400;\">Micro frontends offer organizations a powerful way to break down monolithic applications and create more flexible, collaborative development environments with smaller teams. With micro frontend architectures, companies can reduce complexity in their application structure while still maintaining quality control over individual components. With improved scalability and agility, businesses can keep up with ever-evolving customer needs as well as stay competitive within different industries. </span></p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2023/01/20/micro-frontends/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>Styled components</title>\n\t\t<link>http://pavelterenin.com/2023/01/19/styled-components/</link>\n\t\t<comments>http://pavelterenin.com/2023/01/19/styled-components/#respond</comments>\n\t\t<pubDate>Thu, 19 Jan 2023 23:57:14 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[CSS]]></category>\n\t\t<category><![CDATA[React]]></category>\n\t\t<category><![CDATA[Styled Component]]></category>\n\t\t<category><![CDATA[Styled components]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=339</guid>\n\t\t<description><![CDATA[What is styled components When it comes to styling React components, there are a few different approaches that you can take. One popular approach is using styled-components, a CSS-in-JS library ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter wp-image-288 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/style-components_nitty_gritty-300x171.png\" width=\"800\" height=\"470\" /></p>\n<div id=\"article-body\" class=\"crayons-article__body text-styles spec__body\" data-article-id=\"1193618\">\n<h2><a href=\"#what-is-styled-components\" name=\"what-is-styled-components\"><br />\n</a><br />\nWhat is styled components</h2>\n<p>When it comes to styling React components, there are a few different approaches that you can take. One popular approach is using styled-components, a CSS-in-JS library that lets you write CSS rules that are scoped to a particular component. This means that your CSS will only affect the specific component that you&#8217;re working on and not any other parts of your app.</p>\n<p>Styled-components makes it easy to reuse React components that have their own styles.They&#8217;re great for building user interfaces that look consistent and clean, without having to worry about CSS classes and inline styles.</p>\n<p>Creating a styled component is easy &#8211; just use the <code>styled</code> function from the <code>styled-components</code> library, and pass in a React component. For example, to style the <code>&lt;Button&gt;</code> component:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n   background-color: red;\r\n   color: white;\r\n   font-size: 16px;\r\n   padding: 20px;\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>You can then use the styled component like any other React component:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Styled components are easy to customize and extend. In the example above, we could add a new style to the <code>Button</code> component by using the <code>extend</code> method:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExtendedButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  border: 2px solid black;\r\n}\r\n&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>We could also add a new style to all buttons by using the <code>createGlobalStyle</code> function:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GlobalStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGlobalStyle&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  button {\r\n    border: 2px solid black;\r\n  }\r\n}`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Now all buttons will have a black border, regardless of how they&#8217;re styled.</p>\n<h2><a href=\"#advantages-of-styledcomponents\" name=\"advantages-of-styledcomponents\"><br />\n</a><br />\nAdvantages of Styled-components</h2>\n<ol>\n<li>It makes your code more readable and easier to understand.</li>\n<li>It solves CSS problem of selector name collisions</li>\n<li>It can help you keep your code DRY (Don&#8217;t Repeat Yourself).</li>\n<li>It makes it easy to change the look and feel of your component without having to change the actual implementation of your component.</li>\n<li>It comes with a built-in theme provider, so you can easily change the look and feel of your entire application with a single theme.</li>\n<li>It is easy to unit test because you don&#8217;t have to worry about the style rules leaking into your tests.</li>\n<li>It is easy to integrate with other libraries, such as React Router or Redux.</li>\n<li>It is small and fast, so it won&#8217;t slow down your application.</li>\n<li>The library has a great community and support.</li>\n</ol>\n<h2><a href=\"#disadvantages-of-styledcomponents\" name=\"disadvantages-of-styledcomponents\"><br />\n</a><br />\nDisadvantages of Styled-components</h2>\n<ol>\n<li>Styled-components creates a lot of extra markup that can bloat your code and make it more difficult to read.</li>\n<li>The library is relatively new, so there is less community support than for other CSS-in-JS libraries.</li>\n<li>Styled-components doesn&#8217;t support server-side rendering out of the box. You need to use a library like styled-components-ssr to handle this.</li>\n<li>The library can be difficult to debug because of the way it generates CSS classes.</li>\n</ol>\n<h2><a href=\"#responsive-design-with-styledcomponents\" name=\"responsive-design-with-styledcomponents\"><br />\n</a><br />\nResponsive Design with styled-components</h2>\n<p>You can use media queries to style components based on the size of the user&#8217;s screen. This is especially useful for responsive design.</p>\n<p><strong>CSS @media</strong></p>\n<p>To do this, you first need to create a <code>media</code> object:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  color: red;\r\n  @media (min-width: 768px) {\r\n      color: blue;\r\n  }\r\n  @media (min-width: 992px) {\r\n      color: green;\r\n    }\r\n}\r\n&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>This will make the text color red by default, blue on tablets, and green on desktop devices.</p>\n<p><strong><em>Functions</em></strong><br />\nYou can also use the <code>styled-components</code> media queries helper function to create media objects:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n&lt;span class=&quot;na&quot;&gt;tablet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  @media (min-width: 768px) {\r\n    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n   }\r\n  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\r\n  &lt;span class=&quot;na&quot;&gt;desktop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n    @media (min-width: 992px) {\r\n     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n  }\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Then, you can use the media object in your styled component:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  color: red;\r\n  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tablet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`color: blue;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;\r\n  &lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;desktop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`color: green;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n}\r\n&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>This has the same effect as the previous example.</p>\n<p><strong><em><code>&lt;Media/&gt;</code> component</em></strong></p>\n<p>You can also use the <code>styled-components</code> <code>&lt;Media/&gt;</code> component to style components based on the size of the user&#8217;s screen. The <code>Media</code> component takes a <code>query</code> prop which is a media query, and children which are the styles to apply when the query matches.</p>\n<p>For example, this will make the text color red by default, blue on tablets, and green on desktop devices:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(max-width: 767px)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n    &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is a mobile phone&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;\r\n     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\r\n   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;\r\n  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(min-width: 768px) and (max-width: 991px)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is a tablet&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;\r\n &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(min-width: 992px)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n  &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;This is a desktop&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;\r\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\r\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p><strong><code>styled-media</code> Library.</strong></p>\n<p>Another options to implement responsive styles is <code>styled-media</code> library. It provides a simple API for creating media queries in your component styles.</p>\n<p>First, install <code>styled-media</code>:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">npm install --save styled-media-query</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Then, import it in your component:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;\r\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;breakpoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;styled-media-query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Now you can use media queries in your styles, like this:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  width: 100%;\r\n  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n    width: 50%;\r\n `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>This will make the <code>Container</code> component have a <code>width</code> of <code>100%</code> on all screen sizes, and a <code>width</code> of <code>50%</code> on medium screens and above.</p>\n<p>You can also use the <code>min-width</code> and <code>max-width</code> aliases:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n    width: 50%;\r\n  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>This will make the <code>Container</code> component have a <code>width</code> of <code>50%</code> on medium screens and below.</p>\n<p>You can also use the <code>orientation</code> alias to target specific orientations:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;medium&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;landscape&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n    width: 50%;\r\n  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>This will make the <code>Container</code> component have a <code>width</code> of <code>50%</code> on screens that are both <code>medium</code> and in <code>landscape</code> orientation.</p>\n<h2><a href=\"#global-style\" name=\"global-style\"><br />\n</a><br />\nGlobal Style</h2>\n<p>Styled-components is a great way to create modular and reusable component designs. However, sometimes you need to create global styles that can be applied to all components on the page. This is where <strong>createGlobalStyle</strong> comes in.</p>\n<p><strong>CreateGlobalStyle</strong> is a function that accepts CSS and returns a component. That component will inject the CSS into the page when rendered.</p>\n<p>Here is an example:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;\r\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGlobalStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;styled-components&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;\r\n&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GlobalStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGlobalStyle&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n body {\r\n   color: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;\r\n }\r\n`&lt;/span&gt;\r\n&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\r\n   &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n     &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GlobalStyle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grey&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;\r\n     &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;\r\n   &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>It&#8217;s important to note that <strong>createGlobalStyle</strong> does not support interpolation like the styled component methods. If you need interpolation, you can use a regular CSS template literal.</p>\n<p><strong>CreateGlobalStyle</strong> is great for setting global variables, such as colors, fonts, or margins. It&#8217;s also a good way to reset the browser&#8217;s default styles.</p>\n<p>If you&#8217;re using <strong>createGlobalStyle</strong> in a React project, you&#8217;ll need to make sure to wrap it in a component so that it only renders once. Otherwise, your styles will be injected every time the component renders.</p>\n<h2><a href=\"#using-classname-with-styledcomponents\" name=\"using-classname-with-styledcomponents\"><br />\n</a><br />\nUsing className with styled-components</h2>\n<p>As we saw in the previous section, styled-components allow us to style our components using the template literal syntax. We can also use the className property to add class names to our styled components.</p>\n<p>For example, let&#8217;s say we have a styled component like this:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`\r\n background-color: blue.;\r\n border: none;\r\n border-radius: 3px;\r\n color: white;\r\n padding: 10px 15px;\r\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>If we want to add a class name to this component, we can do so like this:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;\r\n Click me!\r\n&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Then we can create our own CSS styles using the class name &#8220;.button&#8221;. The stylesheet used by the end user won&#8217;t be impacted if your CSS-in-JS style changes.</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"crayon-plain-tag\">&lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\r\n &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5rem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.3rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\r\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;</pre></p>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">Enter fullscreen mode<br />\nExit fullscreen mode</div>\n</div>\n</div>\n<p>Now our button will have the class &#8220;button&#8221; in addition to the styles defined by the styled component. We can use this to apply additional styling to our components if needed.</p>\n<h2><a href=\"#conclusion\" name=\"conclusion\"><br />\n</a><br />\nConclusion</h2>\n<p>So far we&#8217;ve looked at advantages and disadvantages of styled-components, and how to use it to style our React components. We&#8217;ve also seen how to use media queries and other advanced features to make our styles more responsive.</p>\n<p>Styled-components library is a great way to style React components. It&#8217;s easy to use and has a lot of powerful features. It helps to avoid css selectors name collision and helps to separate UI logic from business logic. If you&#8217;re looking for a way to make styles in your React application more readable and maintainable, definitely check out styled-components!</p>\n</div>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2023/01/19/styled-components/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>What Is Web 3.0 and Why It’s Important</title>\n\t\t<link>http://pavelterenin.com/2023/01/19/what-is-web-3-0-and-why-its-important/</link>\n\t\t<comments>http://pavelterenin.com/2023/01/19/what-is-web-3-0-and-why-its-important/#respond</comments>\n\t\t<pubDate>Thu, 19 Jan 2023 23:27:08 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[Block Chain]]></category>\n\t\t<category><![CDATA[Crypto]]></category>\n\t\t<category><![CDATA[Web 3.0]]></category>\n\t\t<category><![CDATA[blockchain]]></category>\n\t\t<category><![CDATA[crypto]]></category>\n\t\t<category><![CDATA[web 3.0]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=334</guid>\n\t\t<description><![CDATA[Have you noticed how Google Maps predicts the estimated time of your arrival more and more precisely? How has Siri become better and better at understanding your requests? Have you ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter wp-image-288 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/web3_458701204-1-300x151.jpg\" width=\"800\" height=\"470\" /></p>\n<p>Have you noticed how Google Maps predicts the estimated time of your arrival more and more precisely? How has Siri become better and better at understanding your requests? Have you ever bought Cryptocurrency or NFT? Maybe you know someone who has. All these technologies are a small glimpse of the upcoming Web 3.0 &#8211; the newest iteration of the Web based on technologies such as blockchain and machine learning.</p>\n<p>The web is standing for &#8220;World Wide Web,&#8221; which is the primary information retrieval mechanism on the internet. Terms the Web and the Internet can often be used interchangeably. In the history of the Internet, we had 2 phases of its evolution. The original Web 1.0. was the very first version of the Internet that lasted from 1991 till 2004. Web 2.0. is the current version of the Web that we all are familiar with. Web 3 or Web 3.0 is the next step in the evolution of the Internet. Let&#8217;s take a deeper dive into the Web&#8217;s history to get a better understanding of what&#8217;s to come next and look at the opportunities and challenges that Web 3.0 creates.</p>\n<h3>Web 1.0</h3>\n<p>Web 1.0 is often referred to as a “read-only Internet”. All its content was created by webmasters. Users could not interact with the content or add content themselves. The Internet had useful information but there was no reason for users to return to the web page after consuming the data. This iteration of the web lasted from 1991 to 2004.</p>\n<h3>Web 2.0</h3>\n<p>In the age of Web 2.0, the Internet became interactive. More and more websites allowed users to communicate with each other. Users started creating content and receiving feedback from other users through likes, comments etc. This engagement keeps users coming back to the same page again and again. Web 2.0 is also known as the Social Web.</p>\n<p>In Web 2.0, not only users can read information from the websites, but the websites can collect information from the users. Centralized companies collect and keep information about us and use this data to serve better content and show targeted advertising. Recommendation algorithms become a core of Web 2.0.</p>\n<p>Web 2.0 led to a big jump in technology development and innovation. It changes the way we work, socialize, create and share information and ideas. It accelerated economic growth. At the same time, Web 2.0 brought in some challenges we haven’t seen before.</p>\n<p>With centralized companies collecting and storing our data, we face the challenge of data privacy and data security. We are willingly giving up information about us to these companies in exchange for convenient web services. But we don’t own this information and can not control where this information will be transferred and who will be accessing this information.</p>\n<p>In Web 2.0, while users can create content, they don’t own it and cannot control it. The platforms can easily block or remove the content without the permission of the creator.</p>\n<h3>Web 3.0</h3>\n<p>Web 3.0 &#8211; is a concept of a new generation of the Internet, based on decentralized technologies and tokenomics. In contrast to Web 2.0, where most of the data is stored in corporations, such as Google, Amazon, Facebook, Apple, etc. (aka “Big Tech”), Web 3.0 data will be decentralized and distributed. Web 3.0 will create platforms that nobody controls but everyone can verify. This will be achieved with the help of new technologies such as blockchain and machine learning.</p>\n<p>Main concepts of Web 3.0:</p>\n<ul>\n<li>Decentralization. With Web 3.0, end-users will take full ownership of the data by using blockchain. The data that is sent over the network is encrypted. Users can choose what information they want to share with businesses and advertising companies and make money from it.</li>\n<li>Native Payments. Web 3.0 uses tokenomics and cryptocurrency for online transactions instead of relying on the outdated infrastructure of traditional banks.</li>\n<li>Trustless and Permissionless. Doesn’t require the support of a trusted 3d party. Anyone can join and participate in the network, and no one gets excluded</li>\n<li>Artificial intelligence and machine learning. In Web 2.0, when users perform keyword searches they often get unrelated results. The AI of Web 3.0 will provide more accurate results by better comprehending what users are searching for.</li>\n</ul>\n<h3>Why Web 3.0 Is Important</h3>\n<p>Centralized Institutions help record and regulate relationships, and the data that they store can be used to validate one&#8217;s judgments. But all these &#8220;records&#8221; can still be subjective. It can be the object of bias and manipulation.</p>\n<p>To achieve objectivity, it is worth eliminating the human intermediary from the chain and instead implementing the blockchain. It is a public decentralized digital ledger of who owns what on the network. Whether it’s money, ownership, or medical records. Each new entry in this registry will refer to the previous one, so all of them will be connected as a chain, and they cannot be faked.</p>\n<p>Thanks to the blockchain, users do not have to check the records themselves &#8211; this will be done by completely unfamiliar and unbiased network participants.</p>\n<p>Web 3.0 will impact the internet in an unprecedented way. It will be more transparent and user-centric. Let’s see what important changes we may expect:</p>\n<ul>\n<li><strong>No third party is required</strong>. Third-party service providers are eliminated by decentralized applications, blockchain, and smart contracts. For instance, the use of cryptocurrencies eliminates the need for banks because all financial transactions take place directly between the two parties using cryptocurrency. No need to pay interest to a third party for transactions.</li>\n<li><strong>Improved security</strong>. Web 3.0 will make it much more difficult for hackers to access sensitive information. There is no single point of failure with blockchain technology since it is decentralized and distributed. Blockchain data cannot be changed or manipulated.</li>\n<li><strong>Improved customer relations</strong>. Web 3.0 makes businesses directly accountable to their consumers by recording every transaction in a decentralized ledger that is visible to all parties. Businesses may exploit this openness to their consumers to develop relationships of trust and loyalty. Customers may trust that the information is accurate and legitimate since data saved on blockchains cannot be changed.</li>\n<li><strong>Improved regulation compliance</strong>. Blockchain is a public ledger of transactions that cannot be altered. Preserving openness makes it simple for businesses to adhere to their governance responsibilities.</li>\n<li><strong>Freedom.</strong> Censorship on the Internet will be gone. Everyone will have the ability to post any information on the Web, and the community, not corporations, will perform moderation.</li>\n<li><strong>It’s cheaper</strong>. The distributed nature of Web 3.0 means applications don&#8217;t require pricey servers and data centres. Instead, they can be operated on a network of end users’ devices.</li>\n<li><strong>Less fake news and fabricated stories</strong>. Disreputable news sources won&#8217;t need to be checked by a third-party source, which may itself be unreliable. Users may validate a news source through its blockchain using Web 3.0 apps</li>\n</ul>\n<p>The supporters of Web 3.0 say that the new Internet promises to build a &#8220;global village&#8221; &#8211; a world focused on people and interpersonal interaction, which will contribute both to the development of technology and business, and the promotion of private initiatives.</p>\n<h3>What Are Its Drawbacks?</h3>\n<p>The concepts of Web 3.0. often get criticized. Let’s take a look at some disadvantages of Web 3.0 that are often publicly scrutinized.</p>\n<ul>\n<li><strong>Outdated, less powerful gadgets may not work with Web 3.0</strong>. So it will require all web users to transition to new types of gadgets that will be powerful enough to create new blocks in blockchains and distribute them to all the users of the network.</li>\n<li><strong>New technologies are difficult to comprehend by a regular user.</strong> This may require some time for users to adapt.</li>\n<li><strong>Many laws need to be created and changed to regulate Web 3.0.</strong> The legal system needs to adapt as well. It may require multiple iterations of even a single law change and multiple precedents before closing all the gaps in the legislation.</li>\n<li><strong>Not environment friendly.</strong> Current blockchain and machine learning technologies require significant computing power that leaves a carbon footprint on our planet. To make Web 3.0 more eco-friendly, these technologies should be improved.</li>\n<li><strong>No guarantee for data security</strong>. Cybersecurity principles of Web 2.0 are based on experience. And so far developers have little of it with Web 3.0. It may take time before all the rules and principles of cybersecurity are settled for Web 3.0.</li>\n</ul>\n<p>One more thing: Will this new iteration of the Internet be owned by Big Tech as Web 2.0 is or not? Big Tech may find a way to monopolize it regardless of all Web 3.0 decentralized principles. Only time will show us if Web 3.0 will be truly decentralized and independent as it’s intended to be.</p>\n<h3>When Is It Likely To Arrive, if Ever?</h3>\n<p>The principles of Web 3.0 are still in development. Transition to a new generation of the Web will be very gradual. It will probably take decades. At the same time, there are already products based on Web 3.0 technologies. Cryptocurrencies use blockchain for decentralization and verification of the owner of the token. Apple Siri uses machine learning and AI to answer any tricky question and even show a bit of personality.</p>\n<p>Recently two platforms Midjourny and Dall-E launched beta testing of AI that can generate an image from text. Some of the examples are jaw-dropping. This is an example of Web 3.0 technologies that are already here.</p>\n<p>But in contrast with Web 2.0, the transition to the next generation won’t happen in one year. No one can predict how long it will take to fully migrate to Web 3.0, but what we can say, the evolution has already started.</p>\n<p><em>Copy here: <a href=\"https://dzone.com/articles/what-is-web-30\">https://dzone.com/articles/what-is-web-30</a></em></p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2023/01/19/what-is-web-3-0-and-why-its-important/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>Trunk-based Development, Continuous Deployment and Why You Should Adopt Them</title>\n\t\t<link>http://pavelterenin.com/2023/01/19/trunk-based-development-continuous-deployment-and-why-you-should-adopt-them/</link>\n\t\t<comments>http://pavelterenin.com/2023/01/19/trunk-based-development-continuous-deployment-and-why-you-should-adopt-them/#respond</comments>\n\t\t<pubDate>Thu, 19 Jan 2023 22:55:07 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[Continuous Deployment]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=329</guid>\n\t\t<description><![CDATA[If you&#8217;re like most developers, you probably have a development process that looks something like this: You make a change to your local branch and push it to a central ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter wp-image-288 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2023/01/Screenshot-2023-01-19-at-2.48.40-PM-1-300x170.png\" width=\"800\" height=\"470\" /></p>\n<p>If you&#8217;re like most developers, you probably have a development process that looks something like this:</p>\n<ol>\n<li>You make a change to your local branch and push it to a central repository.</li>\n<li>Your teammates pull the changes down and integrate them into their own local copies of the codebase.</li>\n<li>Once everyone has updated their code, you run a series of tests to make sure the changes haven&#8217;t broken anything.</li>\n<li>If the tests pass, you create a Pull Request (PR).</li>\n<li>Your teammates review the Pull Request.</li>\n<li>If everything looks good, you merge it to the main branch.</li>\n</ol>\n<p>This process works well enough, but it has a few drawbacks. Firstly, it&#8217;s quite slow. It can take days or even weeks to go from making a change to seeing it live in production.</p>\n<p>Secondly, it&#8217;s quite error-prone. It&#8217;s all too easy for changes to get lost or overwritten during the code merge process, and if tests are only run after the code has been merged then it&#8217;s quite possible for changes to break things that you didn&#8217;t even know were there.</p>\n<p>Thirdly, code review may take a long time, and merge conflicts may appear. In some cases, two branches may have so many contradicting conflicts that a time-consuming refactoring is required.</p>\n<p>That&#8217;s where trunk-based development (TBD) and continuous deployment can help.</p>\n<p>Trunk-based development is a methodology where developers work directly on the main branch of the codebase (the &#8220;trunk&#8221;). This means that there are no long-running development branches that need to be regularly merged back into the trunk; all changes are made directly on the trunk and deployed immediately. No feature branches and no pull requests are used in trunk-based development. Feature flags are commonly used instead of feature branches.</p>\n<p>Continuous deployment is a practice where code changes are automatically deployed to production as soon as they&#8217;re pushed to the main branch. This means that there&#8217;s no need for a separate staging environment; changes are deployed to production immediately after they&#8217;re pushed to the codebase.</p>\n<h3></h3>\n<h3>Advantages of trunk-based development</h3>\n<p>There are many advantages to using trunk-based development (TBD) over other development models:</p>\n<ol>\n<li>TBD ensures that all changes committed to the main branch (trunk) are always in a working state, as every change is immediately integrated and tested. This helps to avoid &#8220;Integration Hell&#8221; during which various changes conflict with each other and cause the main branch to break.</li>\n<li>The frequent, small commits made in TBD make it easier to find and fix bugs, as there is less code to search through and changes can be traced back more easily.</li>\n<li>Smaller commits also make it easier to review code changes, as there is less new code to review in each commit.</li>\n<li>The close collaboration required by TBD can help to improve communication among team members and build a stronger team spirit. Often pair programming is used to enhance TBD.</li>\n<li>TBD can help to get feedback faster on your change. It reduces the risk of project failure, as any issues are found and fixed more quickly.</li>\n<li>Finally, TBD can lead to faster delivery of new features and improvements, as there is no need to wait for lengthy integration and testing phases. Instead, changes can be released as soon as they are ready.</li>\n</ol>\n<h3>Disadvantages of TBD</h3>\n<p>While there are many advantages to using trunk-based development, there are also some potential disadvantages that should be considered.</p>\n<ol>\n<li><strong>Conflicts</strong></li>\n</ol>\n<p>One such disadvantage is the potential for increased conflicts when multiple developers are working on the same code base. This is because each developer will have their own local copy of the code and changes made by one developer may not be immediately reflected in the other developer&#8217;s code base. This can lead to merge conflicts when developers attempt to push their changes back to the central repository.</p>\n<p>The solution for this problem would be to push small chunks of code regularly and do a regular pull. This way you will catch conflicts at an early stage when it’s easy to solve. Large commits are not acceptable in TBD.</p>\n<p><strong>2. Difficult to implement</strong></p>\n<p>Another potential disadvantage of trunk-based development is that it can be difficult to implement in large organizations with hundreds or thousands of developers. This is because each developer would need to have their own local copy of the code, which would require a lot of storage space. Additionally, it would be difficult to manage and keep track of all the different code bases.</p>\n<p>Splitting engineers to smaller teams and splitting large applications into microservices and packages helps to solve this problem.</p>\n<p><strong>3. Difficult to roll back changes </strong></p>\n<p>Finally, trunk-based development can also make it difficult to roll back changes. This is because each change is made directly in the trunk and there is no separate branch for holding previous versions of the code. If a change needs to be rolled back, it can be difficult to identify which change caused the problem and how to revert it.</p>\n<p>Despite these potential disadvantages, trunk-based development can be a very effective way to manage code changes and allow multiple developers to work on the same code base without causing conflicts. When implemented correctly, it can lead to faster development times and fewer problems.</p>\n<h3>Pair programming</h3>\n<p>One of the characteristics of TBD is no Feature Branches and no Pull Requests as there are no branches to merge. But how do we make sure that nobody messes things up without PR? There is a great tool that helps to solve this problem &#8211; pair programming.</p>\n<p>Pair programming is a method of programming where two or more developers work together at the same time on the same code. This can be done in person or over a video call.</p>\n<p>Pair programming can also help improve communication between developers. By working together, two developers can share knowledge and ideas, and each can help keep the other accountable for following best practices. In addition, pair programming can help reduce the number of potential bugs in a codebase. This can lead to improved code quality.</p>\n<p>Pair programming helps to ensure that all code changes are reviewed before they are committed to the main branch. The review goes along with actual coding. Usually, one developer does the actual coding, and the other one does a real-time review and helps with ideas. The code has better quality because there are two pairs of eyes looking at it and it does not need any additional review. That’s why it is often used in conjunction with TBD.</p>\n<h3>How to implement trunk-based development in your project</h3>\n<p>There are a few key steps that you&#8217;ll need to take:</p>\n<ol>\n<li><strong>Choose the main branch. </strong></li>\n</ol>\n<p>The first step is to choose the main branch (trunk) that all developers will work off of. This branch should be stable and should only be updated with the new code that has been thoroughly tested.</p>\n<p><strong>2. Use feature flags.</strong></p>\n<p>When developers want to add new features, they should use feature flags. This allows them to work on their changes without affecting the stability of the application. By default, the feature flag should be disabled. When the feature is complete and tested the feature flag can be enabled.</p>\n<p><strong>3. Merge/pull changes regularly.</strong></p>\n<p>The code should be merged into the main branch on a regular basis. This allows everyone to have the latest changes and helps to avoid conflicts. Working on a feature merges small pieces of the change consistently instead of merging the whole feature when it’s complete.</p>\n<p><strong>4. Test thoroughly. </strong></p>\n<p>Thorough testing is essential in trunk-based development. All changes should be tested before they are merged into the main branch.</p>\n<p><strong>5 . Use continuous integration.</strong><br />\nContinuous integration is a practice in which code changes are automatically built and tested. This helps to ensure that changes don&#8217;t break the build and that they don&#8217;t introduce new bugs. You can use tools such as Jenkins to build your pipeline and automate tests.</p>\n<p><strong>6. Practice Pair programming with your team.</strong><br />\nA pair creates code and reviews it at the same moment. It helps to avoid bad-quality code being merged into the trunk. This is a crucial moment as there is no PR and no PR reviews.</p>\n<p>If you follow these steps, you&#8217;ll be well on your way to implementing trunk-based development in your own process.</p>\n<h3>Conclusion</h3>\n<p>TBD can be scary at first. Before trying it, I was hesitant that it was going to work at all. Pushing your code directly to the main branch without a proper PR process seemed like a crazy idea. What if someone will mess something up and we as a team will miss it? How are we going to roll back those changes? How do we avoid conflicts, working in parallel with the same branch? How do we manage all the feature flags that need to be implemented to avoid some unfinished code will go to production and will be accessible to the user?</p>\n<p>But after trying it for one year I loved it. Everything works smoothly. Pair Programming helps to make sure that only good-quality code gets into the trunk. The team became more productive. No back and forth between branches and no big merge conflicts. No long waiting for code review. The code is integrated quickly, and developers get feedback fast. A well-configured continuous integration pipeline helps to catch any code inconsistencies, bugs, and other issues early.</p>\n<p>Trunk-based development can be a great way to improve your software development process and development experience. Give it a try in your own environment and see how it can help you!</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2023/01/19/trunk-based-development-continuous-deployment-and-why-you-should-adopt-them/feed/</wfw:commentRss>\n\t\t<slash:comments>0</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>ES6 #2. Spread and Rest Operators</title>\n\t\t<link>http://pavelterenin.com/2017/02/01/es6-2-spread-and-rest-operators/</link>\n\t\t<comments>http://pavelterenin.com/2017/02/01/es6-2-spread-and-rest-operators/#comments</comments>\n\t\t<pubDate>Wed, 01 Feb 2017 23:59:11 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[ES6]]></category>\n\t\t<category><![CDATA[Rest]]></category>\n\t\t<category><![CDATA[Spread]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=267</guid>\n\t\t<description><![CDATA[New operator [crayon-67b63801466ce818098120-i/]  was introduced in ES6 . Depending on the context it is called the Spread or the Rest operator. This operator provides a cleaner syntax when you are dealing with ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"aligncenter wp-image-288 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2017/02/SpreadAndRest.jpg\" width=\"800\" height=\"470\" srcset=\"http://pavelterenin.com/wp-content/uploads/2017/02/SpreadAndRest.jpg 800w, http://pavelterenin.com/wp-content/uploads/2017/02/SpreadAndRest-300x176.jpg 300w, http://pavelterenin.com/wp-content/uploads/2017/02/SpreadAndRest-768x451.jpg 768w, http://pavelterenin.com/wp-content/uploads/2017/02/SpreadAndRest-700x411.jpg 700w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></p>\n<p>New operator <pre class=\"crayon-plain-tag\">...</pre>  was introduced in ES6 . Depending on the context it is called the<strong> Spread</strong> or the <strong>Rest</strong> operator. This operator provides a cleaner syntax when you are dealing with arrays or functions with a variable number of arguments and it benefits functional programming paradigm. Let&#8217;s explore it in more details.<span id=\"more-267\"></span></p>\n<h1>Spread Operator</h1>\n<p>The spread operator allows to split elements of an array to separate values, that can be used as a function arguments or inside an another array. Let&#8217;s take a look at the following example:</p>\n<ol>\n<li>Let&#8217;s create two arrays. One contains a list of dynamic programming languages. The other contains a list of static  programming languages.</li>\n</ol>\n<p></p><pre class=\"crayon-plain-tag\">const staticLanguages = [\r\n  \"C\",\r\n  \"C++\",\r\n  \"Java\"\r\n];\r\nconst dynamicLanguages = [\r\n  \"JavaScript\",\r\n  \"Ruby\",\r\n  \"PHP\"\r\n];</pre><p>2. Now we want to create a list of all languages, using arrays that we have just defined plus adding some more languages to it. And then we&#8217;ll print the array and its length on the console .</p><pre class=\"crayon-plain-tag\">const allLanguages = [\r\n  staticLanguages,\r\n  \"C#\",\r\n  dynamicLanguages,\r\n  \"Python\"\r\n];\r\n\r\nconsole.log(allLanguages);\r\n// as a result we get a two level array - not exactly what we wanted\r\n// [\r\n//   [\"C\", \"C++\", \"Java\"],\r\n//   \"C#\",\r\n//   [\"JavaScript\", \"Ruby\", \"PHP\"],\r\n//   \"Python\"\r\n// ]\r\n\r\nconsole.log(allLanguages.length); // 4</pre><p>As seen instead of one level list of values we&#8217;ve got two level array. The array <strong>allLanguages</strong> has 4 elements, two of them are arrays, and two of them are strings. Not exactly what we wanted. To get a one level array we can use  <pre class=\"crayon-plain-tag\">...</pre> operator:</p><pre class=\"crayon-plain-tag\">const allLanguages = [\r\n  ...staticLanguages,\r\n  \"C#\",\r\n  ...dynamicLanguages,\r\n  \"Python\"\r\n];\r\n\r\nconsole.log(allLanguages);\r\n// this time we get right one level list as a result\r\n// [\r\n//   \"C\",\r\n//   \"C++\",\r\n//   \"Java\",\r\n//   \"C#\",\r\n//   \"JavaScript\",\r\n//   \"Ruby\",\r\n//   \"PHP\",\r\n//   \"Python\"\r\n// ]\r\n\r\nconsole.log(allLanguages.length); // 8</pre><p>As you can see the <pre class=\"crayon-plain-tag\">...</pre> operator expands (<em>spreads</em>) the arrays elements. Now, the array <strong>allLanguages </strong>has 8 elements, all of them are strings.</p>\n<p>To get the same result in ES5, we would use the <strong>concat() </strong>method:</p><pre class=\"crayon-plain-tag\">const allLanguages = [].concat(\r\n  staticLanguages,\r\n  [\"C#\"],\r\n  dynamicLanguages,\r\n  [\"Python\"]\r\n);\r\n\r\nconsole.log(allLanguages); \r\n// [ \r\n// \"C\", \r\n// \"C++\", \r\n// \"Java\", \r\n// \"C#\", \r\n// \"JavaScript\", \r\n// \"Ruby\", \r\n// \"PHP\", \r\n// \"Python\" \r\n// ] \r\nconsole.log(allLanguages.length); // 8</pre><p>As you see the solution is not that elegant. Using  the <pre class=\"crayon-plain-tag\">...</pre> operator provides better syntax.</p>\n<p>One more example. We have the <strong>sum</strong> function, that expects three arguments and logs on the screen the sum of the arguments.</p><pre class=\"crayon-plain-tag\">function sum (a, b, c) {\r\n   console.log(a + b + c);\r\n};\r\nconst numbers = [2,4,10];\r\nsum(numbers); //2,4,10undefinedundefined</pre><p>Without the <pre class=\"crayon-plain-tag\">...</pre> operator the function receives only one argument &#8211;  <pre class=\"crayon-plain-tag\">a</pre> . Its value is the array we sent. <pre class=\"crayon-plain-tag\">b</pre>  and <pre class=\"crayon-plain-tag\">c</pre>  don&#8217;t receive any values so they stay <em>undefined</em>. As a result of <pre class=\"crayon-plain-tag\">a + b + c</pre> we have:</p><pre class=\"crayon-plain-tag\">[2,4,10] + undefined + undefined  = 2,4,10undefinedundefined</pre><p>And again, to fix it we can use the <pre class=\"crayon-plain-tag\">...</pre> operator. It <em>spreads</em> the elements of the array so we get the correct result:</p><pre class=\"crayon-plain-tag\">function sum (a, b, c) {\r\n   console.log(a + b + c);\r\n};\r\nconst numbers = [2,4,10];\r\nsum(...numbers); //16</pre><p>The <pre class=\"crayon-plain-tag\">...</pre> operator can be used with the <strong>push()</strong> method:</p><pre class=\"crayon-plain-tag\">a = [4,5,6];\r\nb = [1,2,3];\r\nb.push(...a); // b = [1,2,3,4,5,6]</pre><p>The <pre class=\"crayon-plain-tag\">...</pre> operator provides a simple way to clone and concatenate arrays.</p>\n<p><strong>Concatenate</strong> arrays:</p><pre class=\"crayon-plain-tag\">const odds = [1, 5, 7]; \r\nconst evens = [4, 6, 8]; \r\nconst all = [...odds, ...evens]; \r\nconsole.log(all); // =&amp;gt; [1, 5, 7, 4, 6, 8]</pre><p><strong>Clone</strong> arrays:</p><pre class=\"crayon-plain-tag\">const numbers = [1, 2, 3, 4, 5]; \r\nconst clone = [...numbers]; \r\nconsole.log(clone); // =&amp;gt; [1, 2, 3, 4, 5] \r\nconsole.log(clone === numbers); // =&amp;gt; false</pre><p>The <pre class=\"crayon-plain-tag\">...</pre> operator can be used <strong>only</strong> in places where multiple values expected: inside arrays, arguments of a function, etc. In other places it will cause a syntax error:</p><pre class=\"crayon-plain-tag\">const a = [1,2,3];\r\nconst b = ...a; //will throw an error\r\n//it's the same as we would do something like this:\r\nconst b = 1, 2, 3; // which does not make sense, only one value is expected here</pre><p>You can use the <pre class=\"crayon-plain-tag\">...</pre> with simple arrays only. It can&#8217;t be used with objects.</p>\n<h1>Rest Operator</h1>\n<p>If the last argument of a function has the <pre class=\"crayon-plain-tag\">...</pre> operator as a prefix, it&#8217;s called the <strong>rest</strong> operator. It allows to use a variable number of  arguments as an array.</p>\n<p>You can think of the <strong>rest</strong> operator as a successor of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"><strong>arguments object</strong></a>. Let&#8217;s take a look at how the <strong>arguments</strong> <strong>object</strong> works:</p><pre class=\"crayon-plain-tag\">function logArguments () {\r\n   console.log(arguments); \r\n}\r\nlogArguments(1,2,3,4,5); // [1,2,3,4,5]</pre><p>The <strong>arguments</strong> <strong>object</strong> looks like an array but it&#8217;s an array like object.  <a href=\"http://pavelterenin.com/2017/01/11/7-useful-array-methods-in-javascript/\">Array methods</a> are not applicable to it.</p><pre class=\"crayon-plain-tag\">function logArguments () {\r\n   arguments.filter(arg =&gt; arg % 2 === 0); // This throws an exception\r\n}\r\nlogArguments(1,2,3,4,5);</pre><p>For applying array methods to <strong>arguments object</strong> you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call()</a> method:</p><pre class=\"crayon-plain-tag\">Array.prototype.filter.call(arguments, arg =&gt; arg % 2 === 0);\r\n//or\r\n[].filter.call(arguments, arg =&gt; arg % 2 === 0);</pre><p>This syntax introduces a couple problems:</p>\n<ul>\n<li>We have to indicate the context of the function invocation manually</li>\n<li>We have a list of all the arguments passed to a function , even if we have named arguments in the function.</li>\n<li>It has the hard-coded name<strong>. </strong>We cannot use a custom name.</li>\n<li>Shorter syntax is more preferable</li>\n</ul>\n<p>The  <pre class=\"crayon-plain-tag\">...</pre> <strong> </strong>operator provides a cleaner and more intuitive syntax, custom naming, a list of arguments as an array (not object), and it contains only arguments without a name in a function.</p><pre class=\"crayon-plain-tag\">function logArguments (a, b, ...c) {\r\n   console.log(a); // 1\r\n   console.log(b); // 2\r\n   console.log(c); // [3,4,5] \r\n};\r\nlogArguments(1,2,3,4,5);</pre><p>In this example we pass numbers as parameters to the <strong>logArguments</strong> function. It has regular arguments <pre class=\"crayon-plain-tag\">a</pre> <strong> </strong> and  <pre class=\"crayon-plain-tag\">b</pre> . They receive values  <pre class=\"crayon-plain-tag\">1</pre> and   <pre class=\"crayon-plain-tag\">2</pre> .<strong> </strong> The last argument <pre class=\"crayon-plain-tag\">c</pre>  with  <pre class=\"crayon-plain-tag\">...</pre> as a prefix  collects all <span style=\"text-decoration: underline;\"><em>the rest</em></span> values as an array.</p>\n<p>Let&#8217;s take a look at one more example:</p><pre class=\"crayon-plain-tag\">function logArguments (a, b, ...c) {\r\n   console.log(c);\r\n};\r\nlogArguments(1,2,3,4,5);  // [3,4,5] \r\nlogArguments(1,2,3);  // [3] Creates an array with only one element\r\nlogArguments(1,2);  // [] creates an empty array, as there is no arguments left</pre><p>Argument with the  <pre class=\"crayon-plain-tag\">...</pre> operator as a prefix is a simple array, so you can apply array methods to it.</p><pre class=\"crayon-plain-tag\">function logArguments (...numbers) {\r\n   const evenNumbers = numbers.filter(arg =&gt; arg % 2 === 0); //works fine\r\n   console.log(evenNumbers);\r\n}\r\nlogArguments(1,2,3,4,5); // shows [2,4]</pre><p>You can use the <pre class=\"crayon-plain-tag\">...</pre> operator with the last parameter only. Otherwise it will throw an exception:</p><pre class=\"crayon-plain-tag\">function logArguments (...numbers, a, b) { // This throws an exception\r\n   console.log(numbers);\r\n}</pre><p></p>\n<h1>Conclusion</h1>\n<p>The <pre class=\"crayon-plain-tag\">...</pre> operator looks simple but it&#8217;s very powerful. It ads new functionality and improves syntax significantly. It has two meanings: <strong>spread</strong> and <strong>rest</strong>.</p>\n<p><strong>The Rest</strong> operator provides a simple and clean way to collect arguments as an array. It&#8217;s a better alternative for the <strong>arguments object</strong>.</p>\n<p><strong>The Spread </strong>operator improves syntax when you are dealing with simple arrays, simplifies concatenation and cloning arrays. You can use this operator when you create a new array out of existing arrays.</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2017/02/01/es6-2-spread-and-rest-operators/feed/</wfw:commentRss>\n\t\t<slash:comments>1</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>ES6 #1. Closer Look at LET and CONST keywords</title>\n\t\t<link>http://pavelterenin.com/2017/01/18/es6-1-closer-look-at-let-and-const-keywords/</link>\n\t\t<comments>http://pavelterenin.com/2017/01/18/es6-1-closer-look-at-let-and-const-keywords/#comments</comments>\n\t\t<pubDate>Wed, 18 Jan 2017 06:16:40 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[ES6]]></category>\n\t\t<category><![CDATA[const]]></category>\n\t\t<category><![CDATA[let]]></category>\n\t\t<category><![CDATA[scope]]></category>\n\t\t<category><![CDATA[var]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=218</guid>\n\t\t<description><![CDATA[&#160; The sixth edition of ECMAScript (also known as ECMAScript 2015 or simply ES6) was officially  published in June 2015. It is the most significant update of the language for ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"alignleft wp-image-248 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2017/01/let-const.png\" width=\"800\" height=\"470\" srcset=\"http://pavelterenin.com/wp-content/uploads/2017/01/let-const.png 800w, http://pavelterenin.com/wp-content/uploads/2017/01/let-const-300x176.png 300w, http://pavelterenin.com/wp-content/uploads/2017/01/let-const-768x451.png 768w, http://pavelterenin.com/wp-content/uploads/2017/01/let-const-700x411.png 700w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></p>\n<p>&nbsp;</p>\n<p>The sixth edition of ECMAScript (also known as <strong>ECMAScript 2015</strong> or simply <strong>ES6</strong>) was officially  published in June 2015. It is the most significant update of the language for the last 16 years. It adds new significant syntax update, that makes JavaScript code look cleaner and more object oriented than ever before.  At this moment browser support for <strong>ES6</strong> is still incomplete. However, <strong>ES6</strong> code can be compiled into <strong>ES5</strong> code, that supported by majority of browsers.</p>\n<p><span id=\"more-218\"></span>In this series of posts we will take a closer look at new syntax and features that <strong>ES6</strong> brings to JavaScript. And we start with new <strong><em>let</em></strong> ans <strong><em>const</em></strong> keywords.</p>\n<h1>1. <em>let </em>vs<em> var</em></h1>\n<p>As you know ES5 has only two scopes: <strong>local scope</strong> and <strong>global scope</strong>. If you declare a variable inside function, it will have <strong>local scope</strong>: it can be accessed only within the function. Variable declared outside of a function have <strong>global scope.</strong> It can be accessed from any place in the application.</p>\n<p>ES6 ads one more scope: <strong>block scope. </strong>A variable declared inside some block of code enclosed by curly braces has <strong>block scope.</strong> It&#8217;s only visible within that block of code and cannot be accessed from outside of that block.</p>\n<p><em>If</em> statement,<em> loops</em>, <em>functions</em> e.t.c, all these are considered as blocks of code. ES6 uses <strong><em>let </em></strong>keyword to define a variable with <strong>block scope. </strong></p>\n<p>Let&#8217;s look at the following example.</p>\n<h3><strong>using <em>var:</em></strong></h3>\n<p></p><pre class=\"crayon-plain-tag\">if (true) {\r\n   var keyWord = \"VAR\";\r\n}\r\n\r\nconsole.log(keyWord); // =&gt; VAR</pre><p>The variable <strong><em>keyWord </em></strong>is declared inside of the<em> if</em> block using keyword <b><i>var</i></b>. It can be accessed from outside of the block and we can print it on the console.</p>\n<h3><strong>using <em>let:</em></strong></h3>\n<p></p><pre class=\"crayon-plain-tag\">if (true) {\r\n   let keyWord = \"LET\";\r\n}\r\n\r\nconsole.log(keyWord); // =&gt; Throws an error: Uncaught ReferenceError: language is not defined</pre><p>The <strong><em>keyWord</em> </strong>variable<strong><em> </em></strong>is declared inside of the <em>if</em> block using keyword <em><strong>let</strong></em>. We can <strong>not</strong> access the variable from outside of the block. If we try to print it from outside of the block it throws an exception.</p>\n<p>This is how <strong>block scoping</strong> works in ES6.</p>\n<p>Unlike <em><strong>var, </strong></em><em><strong>let</strong> </em>does not allow you to access variable before it&#8217;s declared . Let&#8217;s take a look at the following peace of code:</p><pre class=\"crayon-plain-tag\">console.log(language); // =&gt; Throws an exception: Uncaught ReferenceError: language is not defined\r\nlet language = \"JavaScript\";</pre><p>If you try to access a variable (print this variable in the console in this case ) before it&#8217;s defined with<strong> let</strong> key word, it will throw an error. Let&#8217;s take a look at how it works with <strong>var</strong> keyword.</p><pre class=\"crayon-plain-tag\">console.log(language); // =&gt; undefined\r\nvar language = \"JavaScript\";</pre><p>It does not throws an exception and prints <em>undefined</em> in the console. This works because JavaScript engine puts declaration of all variables with <strong>var </strong>keyword in the beginning of the code. So even you declare a variable after using it, the JS engine will fix it for you and behind the scene it would look like this:</p><pre class=\"crayon-plain-tag\">var language;\r\nconsole.log(language); // =&gt; undefined\r\nlanguage = \"JavaScript\";</pre><p>Let&#8217;s look at one more example.</p>\n<p class=\"codepen\" data-height=\"253\" data-theme-id=\"27221\" data-slug-hash=\"mROKxm\" data-default-tab=\"js,result\" data-user=\"PavelT\" data-embed-version=\"2\" data-pen-title=\"mROKxm\">See the Pen <a href=\"http://codepen.io/PavelT/pen/mROKxm/\">mROKxm</a> by Pavel Terenin (<a href=\"http://codepen.io/PavelT\">@PavelT</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>In this example we have 5 buttons in HTML file. In JS file we iterate through each of the buttons using <em>for </em>loop. Inside of the loop we give a number to each button and when we click one of them we would like to see a message with the number of the button. For example when we click button #3 we would like to see &#8220;Button #3&#8221; message.  The example is interactive, please try to click buttons.</p>\n<p>As you see it does not work as we expected. It always shows message &#8220;<strong>Button #5</strong>&#8220;, no meter what button we click. This happens because we use <strong>var </strong>keyword in this line:</p><pre class=\"crayon-plain-tag\">for (var i = 0; i &lt; buttons.length; i++ )</pre><p>It means variable <em><strong>i </strong></em>is global and it changes it&#8217;s value as we go through the loop. In the end it will have value, that was given to it in the last iteration.</p>\n<p>Let&#8217;s change  <strong>var </strong>keyword to <strong>let.</strong></p><pre class=\"crayon-plain-tag\">for (let i = 0; i &lt; buttons.length; i++ )</pre><p>This way we will limit scope of <strong><em>i</em> </strong>variable to block of code. In this case it&#8217;s a block of the <em><strong>for</strong> </em>loop. The variable is locked to each iteration of the loop and we will have right result:</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"27221\" data-slug-hash=\"jyVvOq\" data-default-tab=\"js,result\" data-user=\"PavelT\" data-embed-version=\"2\" data-pen-title=\"jyVvOq\">See the Pen <a href=\"http://codepen.io/PavelT/pen/jyVvOq/\">jyVvOq</a> by Pavel Terenin (<a href=\"http://codepen.io/PavelT\">@PavelT</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>&nbsp;</p>\n<h1>2. Using <em>const</em></h1>\n<p>Besides <em><strong>let </strong></em>ES6 introduced one more new keyword &#8211; <strong><em>const. </em><em>const </em></strong>stands for <em>constant. </em>Constant &#8211; is a variable that can&#8217;t change it&#8217;s value  after it&#8217;s declaration. A variable declared with <strong><em>const </em></strong>has a block scope and works much like variables declared with  <em><strong>let</strong></em>. But unlike <em><strong>let </strong></em>the value of a constant can not be changed .</p>\n<p>Let&#8217;s take a look to the following example.</p><pre class=\"crayon-plain-tag\">//var and let variables can change \r\nvar language = \"JavaScript\";\r\nlanguage = \"C#\"; //works\r\n\r\nlet OS = \"Windows\";\r\nOS = \"Mac OS\"; // works as well\r\n\r\n//const variables can not change\r\nconst browser = \"Chrome\";\r\nbrowser = \"Opera\" //throws an exception: Uncaught TypeError: Assignment to constant variable.</pre><p>Unlike <strong><em>let</em></strong> and <em><strong>var</strong></em> you cannot declare a constant without a value:</p><pre class=\"crayon-plain-tag\">var langauge; //works. value is undefined\r\nlet OS; //works. value is undefined\r\nconst browser; //Uncaught SyntaxError: Missing initializer in const declaration</pre><p><em><strong>const </strong></em>also works with objects and arrays.</p><pre class=\"crayon-plain-tag\">const person = {name: \"Bill\", age: 32};\r\nperson = {name: \"Peter\", age: 37}; //Uncaught TypeError: Assignment to constant variable.\r\n\r\nconst numbers = [1,2,3];\r\nnumbers = [10, 20, 30]; //Uncaught TypeError: Assignment to constant variable.</pre><p>However objects are not fully protected by <em><strong>const</strong></em>. We still can change properties of the object .</p><pre class=\"crayon-plain-tag\">const person = {name: \"Bill\", age: 32};\r\nperson.name = \"Peter\"; //works\r\nconsole.log(person); // =&gt; {name: \"Peter\", age: 32}</pre><p>So as we see <em><strong>const </strong></em> does not make objects immutable. The same happens with arrays. You can not reassign it, but you can add, remove, reorder and modify elements:</p><pre class=\"crayon-plain-tag\">const numbers = [1,2,3];\r\nnumbers[1] = 222;\r\nnumbers.push(4);\r\nnumbers.shift();\r\n\r\nconsole.log(numbers); //=&gt; [222,3,4]</pre><p>If you do need to make an object immutable, you can use <em><strong>Object.freeze</strong></em> method. It&#8217;s not ES6 method, you can take a look at <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">how it works on MDN</a>. It does not allow any changes.</p><pre class=\"crayon-plain-tag\">const person = Object.freeze({name: \"Bill\", age: 32});\r\nperson.name = \"Peter\"; \r\nconsole.log(person); // =&gt; {name:\"Bill\", age: 32}</pre><p></p><pre class=\"crayon-plain-tag\">const numbers = Object.freeze([1,2,3]); \r\nnumbers[1] = 222; //does not throw an error but value is not changed\r\n\r\nconsole.log(numbers); //=&gt; [1,2,3]\r\n\r\nnumbers.push(4); //throws an exception\r\nnumbers.shift();//throws an exception</pre><p>This way we can make objects and arrays fully immutable.</p>\n<h1>Conclusion</h1>\n<p>You are probably wondering what keyword you should use in your application. I have a suggestion: use <em><strong>const </strong></em>as much as possible. It makes you code more robust. If you expect that your variable is going to change during program execution &#8211; use <em><strong>let. </strong></em>So what&#8217;s about <em><strong>var</strong>?</em> The reality is that when you write ES6 code and you want your code to be robust and easy to debug  you don&#8217;t really need <em><strong>var. </strong></em>R.I.P. <em><strong>var, </strong></em>you will be missed.</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2017/01/18/es6-1-closer-look-at-let-and-const-keywords/feed/</wfw:commentRss>\n\t\t<slash:comments>1</slash:comments>\n\t\t</item>\n\t\t<item>\n\t\t<title>7 Useful Array Methods in JavaScript</title>\n\t\t<link>http://pavelterenin.com/2017/01/11/7-useful-array-methods-in-javascript/</link>\n\t\t<comments>http://pavelterenin.com/2017/01/11/7-useful-array-methods-in-javascript/#comments</comments>\n\t\t<pubDate>Wed, 11 Jan 2017 05:48:57 +0000</pubDate>\n\t\t<dc:creator><![CDATA[Pavel Terenin]]></dc:creator>\n\t\t\t\t<category><![CDATA[JavaScript]]></category>\n\t\t<category><![CDATA[Attays]]></category>\n\t\t<category><![CDATA[Useful Methods]]></category>\n\n\t\t<guid isPermaLink=\"false\">http://pavelterenin.com/?p=156</guid>\n\t\t<description><![CDATA[If you are working with JavaScript you probably use Arrays a lot. In this post I compiled a list of the most useful array methods, that can save you time and ...]]></description>\n\t\t\t\t<content:encoded><![CDATA[<p><img class=\"alignnone wp-image-196 size-full\" src=\"http://pavelterenin.com/wp-content/uploads/2017/01/7UsefulArrayMethodsJS-1.png\" width=\"800\" height=\"470\" srcset=\"http://pavelterenin.com/wp-content/uploads/2017/01/7UsefulArrayMethodsJS-1.png 800w, http://pavelterenin.com/wp-content/uploads/2017/01/7UsefulArrayMethodsJS-1-300x176.png 300w, http://pavelterenin.com/wp-content/uploads/2017/01/7UsefulArrayMethodsJS-1-768x451.png 768w, http://pavelterenin.com/wp-content/uploads/2017/01/7UsefulArrayMethodsJS-1-700x411.png 700w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></p>\n<p>If you are working with JavaScript you probably use Arrays a lot. In this post I compiled a list of the most useful array methods, that can save you time and your code will look cleaner and more readable.</p>\n<h2>1. forEach</h2>\n<p>This one is the most popular method. Instead of doing <strong>for</strong> or <strong>while</strong> loops to iterate through all elements of an array we can call the <strong>forEach() </strong>method. The <strong>forEach() </strong>method<strong> </strong>accepts function as a parameter and calls this function once for each element in the array, in order.</p><pre class=\"crayon-plain-tag\">var languages = [\"C#\", \"Java\", \"C++\", \"PHP\", \"JavaScript\"];\r\n\r\nlanguages.forEach(function(language, index) {\r\n   console.log(index+1 + \". \" + language);\r\n});\r\n// 1. C#\r\n// 2. Java\r\n// 3. C++\r\n// 4. PHP\r\n// 5. JavaScript</pre><p><strong>forEach()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.forEach(function(currentValue, index, arr) {\r\n    //do your stuff here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<h2>2. Map</h2>\n<p>The <strong>map() </strong>method creates a new array by mapping each value of the original array through a transformation function. The <strong>map() </strong>method does not change the original array.</p>\n<p>For example, we have an array of numbers and we would like to square all elements of the array. For this purpose we can use the<strong> map()</strong> method:</p><pre class=\"crayon-plain-tag\">var numbers = [1,2,3,4];\r\n\r\nvar squaredNumbers = numbers.map(function(number) {\r\n   return number * number;\r\n});\r\n\r\nconsole.log(squaredNumber) // =&gt; [1,4,9,16]</pre><p>One more example. We want to create a new array by transforming items of the original array to objects with properties  id, name and category:</p><pre class=\"crayon-plain-tag\">var languages = [\"C#\", \"PHP\", \"JavaScript\"];\r\n\r\nvat mappedLanguageList = languages.map(function(language, ,index) {\r\n   return {\r\n      id: index + 1,\r\n      name: language,\r\n      category: \"Programming Language\"\r\n   };\r\n});</pre><p>Map method created a new array, that we stored in <strong>mappedLanguageList</strong> variable, but it did not update the original array.</p><pre class=\"crayon-plain-tag\">console.log(mappedLanguageList);\r\n// =&gt; [\r\n//     {id: 1, name: \"C#\", category: \"Programming Language\"},\r\n//     {id: 2, name: \"PHP\", category: \"Programming Language\"},\r\n//     {id: 3, name: \"JavaScript\", category: \"Programming Language\"}\r\n//    ]\r\n \r\nconsole.log(languages);\r\n// =&gt; [\"C#\", \"PHP\", \"JavaScript\"]</pre><p><strong>map()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.map(function(currentValue, index, arr) {\r\n    //do your mapping here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<h2>3. Find</h2>\n<p>If you would like to find an item in an array that matches specific condition you could use <strong>find() </strong>method. The <strong>find()</strong> method looks through each element of the array and returns the first one that passes the test, that is provided as a function. The function returns <em><strong>true</strong></em> (pass) or<em><strong> false</strong></em> (does not pass). And the <strong>find() </strong>method returns value of the element that passes the test.</p>\n<p>Let&#8217;s take a look at the following example. Here we have an array of numbers and we would like to find the first even number in the array.</p><pre class=\"crayon-plain-tag\">[5, 7, 4, 3, 6].find(function(number) {\r\n    return number % 2 === 0;\r\n}); // =&gt; 4</pre><p>In this example the <strong>find() </strong>method returns 4, because it is the first element that passes the test (the function returns true). In the array the number 6 also passes the test, but the <strong>find() </strong>method returns only the first value found and does not check the remaining values.</p>\n<p>If no element passes the test the <strong>find() </strong>method returns <em>undefined.</em></p>\n<p><strong>find()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.find(function(currentValue, index, arr) {\r\n    //put your test here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<p>The <strong>find() </strong>method does not change the original array.</p>\n<h2>4.Filter</h2>\n<p>The <strong>filter() </strong>method works similar to the <strong>find() </strong>method, but returns a new array filled with all values, that pass a test.</p>\n<p>Let&#8217;s take the array of numbers from the previous example and find all even numbers in it.</p><pre class=\"crayon-plain-tag\">[5, 7, 4, 3, 6].filter(function(number) {\r\n    return number % 2 === 0;\r\n});  // =&gt; [4, 6]</pre><p>The <strong>filter() </strong>method created a new array that we store in <strong>evenNumbers </strong>variable.</p>\n<p>If no element passes the test the <strong>filter() </strong>method returns an empty array<em>.</em></p>\n<p>The<strong> filter()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.filter(function(currentValue, index, arr) {\r\n    //put your test here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<p>The <strong>filter() </strong>method does not change the original array.</p>\n<h2>5. Every</h2>\n<p>The <strong>every() </strong>method checks if all the elements in the array pass a test, that is provided as a function. It returns a boolean value. If it finds at least one element where the function returns false the <strong>every() </strong>method returns false.</p><pre class=\"crayon-plain-tag\">[5, 7, 4, 3, 6].every(function(number) {\r\n    return number % 2 === 0;\r\n});\r\n// returns false</pre><p></p><pre class=\"crayon-plain-tag\">[4, 8, 6].every(function(number) {\r\n    return number % 2 === 0;\r\n});\r\n//returns true</pre><p>The<strong> every()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.every(function(currentValue, index, arr) {\r\n    //put your test here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<p>The <strong>every() </strong>method does not change the original array.</p>\n<h2>6. Some</h2>\n<p>The <strong>some()</strong> method checks if any of the elements in an array pass a test, that is provided as a function. It returns a boolean value.  If it finds at least one element where the function returns true the <strong>some() </strong>method returns<em> true</em>.</p><pre class=\"crayon-plain-tag\">[5, 7, 4, 3, 6].some(function(number) {\r\n    return number % 2 === 0;\r\n});\r\n// returns true</pre><p>The<strong> some()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.some(function(currentValue, index, arr) {\r\n    //put your test here\r\n});</pre><p><strong>currentValue</strong> &#8211; the value of the current element</p>\n<p><strong>index &#8211; </strong>the array index of the current element</p>\n<p><strong>arr </strong>&#8211; the array itself</p>\n<p>Last two parameters (index and arr) are optional.</p>\n<p>The <strong>some</strong><strong>() </strong>method does not change the original array.</p>\n<h2>7.Sort</h2>\n<p>The <strong>sort() </strong>method sorts the elements of an array. By default, the <strong>sort()</strong> method sorts the values as strings in alphabetical and ascending order. This works perfectly for <em>strings </em>but it does not work for numeric values.</p><pre class=\"crayon-plain-tag\">[\"Java\", \"PHP\", \"C#\", \"JavaScript\", \"Ruby\"].sort();\r\n// =&gt; [\"C#\", \"Java\", \"JavaScript\", \"PHP\", \"Ruby\"]\r\n\r\n\r\n[12, 4, 1, 7, 3, 100].sort();\r\n// =&gt; [1, 100, 12, 3, 4, 7]</pre><p>As you see the default behaviour is not the best choice for sorting an array by numeric value. In this case you need to provide a &#8220;compare function&#8221;.</p>\n<p><strong>Ascending order:</strong></p><pre class=\"crayon-plain-tag\">[12, 4, 1, 7, 3, 100].sort(function(a, b){\r\n    return a-b\r\n});\r\n// =&gt; [1, 3, 4, 7, 12, 100]</pre><p><strong>Descending order:</strong></p><pre class=\"crayon-plain-tag\">[12, 4, 1, 7, 3, 100].sort(function(a, b){\r\n    return b-a\r\n});\r\n// =&gt; [100, 12, 7, 4, 3, 1]</pre><p><strong>Sorting array of objects:</strong></p><pre class=\"crayon-plain-tag\">var people = [\r\n     {name: \"Bill\", age: 42},\r\n     {name: \"Peter\", age: 35},\r\n     {name: \"Marry\", age: 27}\r\n];\r\n\r\npeople.sort(function(a, b) {return a.age - b.age});\r\n// =&gt; [{name: \"Marry\", age: 27}, {name: \"Peter\", age: 35}, {name: \"Bill\", age: 42}];</pre><p>If you would like to sort objects by string value you can use something like this:</p><pre class=\"crayon-plain-tag\">people.sort(function (a,b) {\r\n   if (a.name &lt; b.name){\r\n     return -1;\r\n   } \r\n   if (a.name &gt; b.name) {\r\n     return 1;\r\n   }\r\n   return 0;\r\n});\r\n// =&gt; [{name: \"Bill\", age: 42}, {name: \"Marry\", age: 27}, {name: \"Peter\", age: 35}]</pre><p>Or simply use string method <strong>localeCompare() </strong>that does the comparison for you:</p><pre class=\"crayon-plain-tag\">people.sort(function (a,b) {\r\n   return a.name.localeCompare(b.name)\r\n});\r\n// =&gt; [{name: \"Bill\", age: 42}, {name: \"Marry\", age: 27}, {name: \"Peter\", age: 35}]</pre><p>The<strong> sort()</strong> method has the following syntax:</p><pre class=\"crayon-plain-tag\">array.sort(compareFunction);</pre><p><strong>compareFunction</strong> &#8211; a function that defines an alternative sort order. The function should return a negative, zero, or positive value. This parameter is optional.</p>\n<p>The <strong>sort() </strong>method changes the original array.</p>\n]]></content:encoded>\n\t\t\t<wfw:commentRss>http://pavelterenin.com/2017/01/11/7-useful-array-methods-in-javascript/feed/</wfw:commentRss>\n\t\t<slash:comments>2</slash:comments>\n\t\t</item>\n\t</channel>\n</rss>\n",
    "url": "http://pavelterenin.com/feed/"
  }